
Assignment04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000b64  00000bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800206  00800206  00000bfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000102a  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc5  00000000  00000000  00001d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069c  00000000  00000000  00002aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000676  00000000  00000000  00003350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000542  00000000  00000000  000039c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003f08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
   2:	00 00       	nop
   4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
   6:	00 00       	nop
   8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
   a:	00 00       	nop
   c:	91 c0       	rjmp	.+290    	; 0x130 <__bad_interrupt>
   e:	00 00       	nop
  10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
  12:	00 00       	nop
  14:	8d c0       	rjmp	.+282    	; 0x130 <__bad_interrupt>
  16:	00 00       	nop
  18:	8b c0       	rjmp	.+278    	; 0x130 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	89 c0       	rjmp	.+274    	; 0x130 <__bad_interrupt>
  1e:	00 00       	nop
  20:	87 c0       	rjmp	.+270    	; 0x130 <__bad_interrupt>
  22:	00 00       	nop
  24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
  26:	00 00       	nop
  28:	83 c0       	rjmp	.+262    	; 0x130 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	81 c0       	rjmp	.+258    	; 0x130 <__bad_interrupt>
  2e:	00 00       	nop
  30:	7f c0       	rjmp	.+254    	; 0x130 <__bad_interrupt>
  32:	00 00       	nop
  34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
  36:	00 00       	nop
  38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
  3e:	00 00       	nop
  40:	77 c0       	rjmp	.+238    	; 0x130 <__bad_interrupt>
  42:	00 00       	nop
  44:	0b c2       	rjmp	.+1046   	; 0x45c <__vector_17>
  46:	00 00       	nop
  48:	73 c0       	rjmp	.+230    	; 0x130 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
  4e:	00 00       	nop
  50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
  52:	00 00       	nop
  54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
  56:	00 00       	nop
  58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	69 c0       	rjmp	.+210    	; 0x130 <__bad_interrupt>
  5e:	00 00       	nop
  60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
  62:	00 00       	nop
  64:	65 c0       	rjmp	.+202    	; 0x130 <__bad_interrupt>
  66:	00 00       	nop
  68:	63 c0       	rjmp	.+198    	; 0x130 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	61 c0       	rjmp	.+194    	; 0x130 <__bad_interrupt>
  6e:	00 00       	nop
  70:	5f c0       	rjmp	.+190    	; 0x130 <__bad_interrupt>
  72:	00 00       	nop
  74:	0c c2       	rjmp	.+1048   	; 0x48e <__vector_29>
  76:	00 00       	nop
  78:	5b c0       	rjmp	.+182    	; 0x130 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	59 c0       	rjmp	.+178    	; 0x130 <__bad_interrupt>
  7e:	00 00       	nop
  80:	57 c0       	rjmp	.+174    	; 0x130 <__bad_interrupt>
  82:	00 00       	nop
  84:	55 c0       	rjmp	.+170    	; 0x130 <__bad_interrupt>
  86:	00 00       	nop
  88:	53 c0       	rjmp	.+166    	; 0x130 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	51 c0       	rjmp	.+162    	; 0x130 <__bad_interrupt>
  8e:	00 00       	nop
  90:	4f c0       	rjmp	.+158    	; 0x130 <__bad_interrupt>
  92:	00 00       	nop
  94:	4d c0       	rjmp	.+154    	; 0x130 <__bad_interrupt>
  96:	00 00       	nop
  98:	4b c0       	rjmp	.+150    	; 0x130 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	49 c0       	rjmp	.+146    	; 0x130 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	47 c0       	rjmp	.+142    	; 0x130 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	45 c0       	rjmp	.+138    	; 0x130 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	49 c1       	rjmp	.+658    	; 0x33c <__vector_42>
  aa:	00 00       	nop
  ac:	41 c0       	rjmp	.+130    	; 0x130 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	3f c0       	rjmp	.+126    	; 0x130 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	3d c0       	rjmp	.+122    	; 0x130 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3b c0       	rjmp	.+118    	; 0x130 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	39 c0       	rjmp	.+114    	; 0x130 <__bad_interrupt>
  be:	00 00       	nop
  c0:	37 c0       	rjmp	.+110    	; 0x130 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	35 c0       	rjmp	.+106    	; 0x130 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	33 c0       	rjmp	.+102    	; 0x130 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	31 c0       	rjmp	.+98     	; 0x130 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	2f c0       	rjmp	.+94     	; 0x130 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	2d c0       	rjmp	.+90     	; 0x130 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2b c0       	rjmp	.+86     	; 0x130 <__bad_interrupt>
  da:	00 00       	nop
  dc:	29 c0       	rjmp	.+82     	; 0x130 <__bad_interrupt>
  de:	00 00       	nop
  e0:	27 c0       	rjmp	.+78     	; 0x130 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a2 00       	.word	0x00a2	; ????
  e6:	a4 00       	.word	0x00a4	; ????
  e8:	a6 00       	.word	0x00a6	; ????
  ea:	a8 00       	.word	0x00a8	; ????
  ec:	aa 00       	.word	0x00aa	; ????
  ee:	ac 00       	.word	0x00ac	; ????
  f0:	ae 00       	.word	0x00ae	; ????
  f2:	b0 00       	.word	0x00b0	; ????
  f4:	b2 00       	.word	0x00b2	; ????

000000f6 <__ctors_end>:
  f6:	11 24       	eor	r1, r1
  f8:	1f be       	out	0x3f, r1	; 63
  fa:	cf ef       	ldi	r28, 0xFF	; 255
  fc:	d1 e2       	ldi	r29, 0x21	; 33
  fe:	de bf       	out	0x3e, r29	; 62
 100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
 102:	12 e0       	ldi	r17, 0x02	; 2
 104:	a0 e0       	ldi	r26, 0x00	; 0
 106:	b2 e0       	ldi	r27, 0x02	; 2
 108:	e4 e6       	ldi	r30, 0x64	; 100
 10a:	fb e0       	ldi	r31, 0x0B	; 11
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	0b bf       	out	0x3b, r16	; 59
 110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x14>
 112:	07 90       	elpm	r0, Z+
 114:	0d 92       	st	X+, r0
 116:	a6 30       	cpi	r26, 0x06	; 6
 118:	b1 07       	cpc	r27, r17
 11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0x10>

0000011c <__do_clear_bss>:
 11c:	22 e0       	ldi	r18, 0x02	; 2
 11e:	a6 e0       	ldi	r26, 0x06	; 6
 120:	b2 e0       	ldi	r27, 0x02	; 2
 122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
 124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
 126:	a2 31       	cpi	r26, 0x12	; 18
 128:	b2 07       	cpc	r27, r18
 12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
 12c:	65 d1       	rcall	.+714    	; 0x3f8 <main>
 12e:	18 c5       	rjmp	.+2608   	; 0xb60 <_exit>

00000130 <__bad_interrupt>:
 130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <digitToHex>:
 */

uint8_t digitToHex(uint8_t digit)
{
	uint8_t hexValue;
	switch (digit)
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	e9 30       	cpi	r30, 0x09	; 9
 13a:	f1 05       	cpc	r31, r1
 13c:	a8 f4       	brcc	.+42     	; 0x168 <digitToHex+0x36>
 13e:	ee 58       	subi	r30, 0x8E	; 142
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	d5 c3       	rjmp	.+1962   	; 0x8ee <__tablejump2__>
	{
		case 0: hexValue = 0xFC;
		break;
		case 1: hexValue = 0x60;
 144:	80 e6       	ldi	r24, 0x60	; 96
 146:	08 95       	ret
		break;
		case 2: hexValue = 0xDA;
 148:	8a ed       	ldi	r24, 0xDA	; 218
		break;
 14a:	08 95       	ret
		case 3: hexValue = 0xF2;
 14c:	82 ef       	ldi	r24, 0xF2	; 242
		break;
 14e:	08 95       	ret
		case 4: hexValue = 0x66;
 150:	86 e6       	ldi	r24, 0x66	; 102
		break;
 152:	08 95       	ret
		case 5: hexValue = 0xB6;
 154:	86 eb       	ldi	r24, 0xB6	; 182
		break;
 156:	08 95       	ret
		case 6: hexValue = 0xBE;
 158:	8e eb       	ldi	r24, 0xBE	; 190
		break;
 15a:	08 95       	ret
		case 7: hexValue = 0xE0;
 15c:	80 ee       	ldi	r24, 0xE0	; 224
		break;
 15e:	08 95       	ret
		case 8: hexValue = 0xFE;
 160:	8e ef       	ldi	r24, 0xFE	; 254
		break;
 162:	08 95       	ret
		case 9: hexValue = 0xF6;
 164:	86 ef       	ldi	r24, 0xF6	; 246
		break;
 166:	08 95       	ret
uint8_t digitToHex(uint8_t digit)
{
	uint8_t hexValue;
	switch (digit)
	{
		case 0: hexValue = 0xFC;
 168:	8c ef       	ldi	r24, 0xFC	; 252
		//set to 0 if undefined
		default: hexValue = 0xFC;
		break;
	}
	return hexValue;	
}
 16a:	08 95       	ret

0000016c <printint_7_segment>:
/**
 * Printing function for integers
 */

void printint_7_segment(uint16_t value)
{
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	currentSegment = 0;
 17a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <currentSegment>
	numberLength = 0;
 17e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <numberLength>
	free(valueHex);
 182:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 186:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 18a:	61 d4       	rcall	.+2242   	; 0xa4e <free>
		
	valueHex = malloc(sizeof(uint8_t) * numberLength);
 18c:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <numberLength>
 190:	81 2f       	mov	r24, r17
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	c4 d3       	rcall	.+1928   	; 0x91e <malloc>
 196:	7c 01       	movw	r14, r24
 198:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
 19c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>

	for (int i = 0; i<4; i++)
	{
		//convert each of the value's digit to HEX
		if (value <= 0)
 1a0:	20 97       	sbiw	r28, 0x00	; 0
 1a2:	d9 f5       	brne	.+118    	; 0x21a <printint_7_segment+0xae>
 1a4:	66 c0       	rjmp	.+204    	; 0x272 <printint_7_segment+0x106>
 1a6:	20 97       	sbiw	r28, 0x00	; 0
 1a8:	09 f4       	brne	.+2      	; 0x1ac <printint_7_segment+0x40>
 1aa:	63 c0       	rjmp	.+198    	; 0x272 <printint_7_segment+0x106>
		break;
		valueHex[i] = digitToHex(value % 10);
 1ac:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <__data_end>
 1b0:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <__data_end+0x1>
 1b4:	e0 0e       	add	r14, r16
 1b6:	f1 1e       	adc	r15, r17
 1b8:	9e 01       	movw	r18, r28
 1ba:	ad ec       	ldi	r26, 0xCD	; 205
 1bc:	bc ec       	ldi	r27, 0xCC	; 204
 1be:	a0 d3       	rcall	.+1856   	; 0x900 <__umulhisi3>
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	9c 01       	movw	r18, r24
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	82 0f       	add	r24, r18
 1e0:	93 1f       	adc	r25, r19
 1e2:	2c 2f       	mov	r18, r28
 1e4:	28 1b       	sub	r18, r24
 1e6:	82 2f       	mov	r24, r18
 1e8:	a4 df       	rcall	.-184    	; 0x132 <digitToHex>
 1ea:	f7 01       	movw	r30, r14
 1ec:	80 83       	st	Z, r24
		value /= 10;
 1ee:	9e 01       	movw	r18, r28
 1f0:	ad ec       	ldi	r26, 0xCD	; 205
 1f2:	bc ec       	ldi	r27, 0xCC	; 204
 1f4:	85 d3       	rcall	.+1802   	; 0x900 <__umulhisi3>
 1f6:	ec 01       	movw	r28, r24
 1f8:	d6 95       	lsr	r29
 1fa:	c7 95       	ror	r28
 1fc:	d6 95       	lsr	r29
 1fe:	c7 95       	ror	r28
 200:	d6 95       	lsr	r29
 202:	c7 95       	ror	r28
 204:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <numberLength>
		numberLength++;
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <numberLength>
 20e:	0f 5f       	subi	r16, 0xFF	; 255
	numberLength = 0;
	free(valueHex);
		
	valueHex = malloc(sizeof(uint8_t) * numberLength);

	for (int i = 0; i<4; i++)
 210:	1f 4f       	sbci	r17, 0xFF	; 255
 212:	04 30       	cpi	r16, 0x04	; 4
 214:	11 05       	cpc	r17, r1
 216:	39 f6       	brne	.-114    	; 0x1a6 <printint_7_segment+0x3a>
 218:	2c c0       	rjmp	.+88     	; 0x272 <printint_7_segment+0x106>
	{
		//convert each of the value's digit to HEX
		if (value <= 0)
		break;
		valueHex[i] = digitToHex(value % 10);
 21a:	9e 01       	movw	r18, r28
 21c:	ad ec       	ldi	r26, 0xCD	; 205
 21e:	bc ec       	ldi	r27, 0xCC	; 204
 220:	6f d3       	rcall	.+1758   	; 0x900 <__umulhisi3>
 222:	96 95       	lsr	r25
 224:	87 95       	ror	r24
 226:	96 95       	lsr	r25
 228:	87 95       	ror	r24
 22a:	96 95       	lsr	r25
 22c:	87 95       	ror	r24
 22e:	9c 01       	movw	r18, r24
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	82 0f       	add	r24, r18
 242:	93 1f       	adc	r25, r19
 244:	fc 2f       	mov	r31, r28
 246:	f8 1b       	sub	r31, r24
 248:	8f 2f       	mov	r24, r31
 24a:	73 df       	rcall	.-282    	; 0x132 <digitToHex>
 24c:	f7 01       	movw	r30, r14
 24e:	80 83       	st	Z, r24
		value /= 10;
 250:	9e 01       	movw	r18, r28
 252:	ad ec       	ldi	r26, 0xCD	; 205
 254:	bc ec       	ldi	r27, 0xCC	; 204
 256:	54 d3       	rcall	.+1704   	; 0x900 <__umulhisi3>
 258:	ec 01       	movw	r28, r24
 25a:	d6 95       	lsr	r29
 25c:	c7 95       	ror	r28
 25e:	d6 95       	lsr	r29
 260:	c7 95       	ror	r28
 262:	d6 95       	lsr	r29
 264:	c7 95       	ror	r28
 266:	1f 5f       	subi	r17, 0xFF	; 255
		numberLength++;
 268:	10 93 09 02 	sts	0x0209, r17	; 0x800209 <numberLength>
 26c:	01 e0       	ldi	r16, 0x01	; 1
	numberLength = 0;
	free(valueHex);
		
	valueHex = malloc(sizeof(uint8_t) * numberLength);

	for (int i = 0; i<4; i++)
 26e:	10 e0       	ldi	r17, 0x00	; 0
 270:	9a cf       	rjmp	.-204    	; 0x1a6 <printint_7_segment+0x3a>
 272:	df 91       	pop	r29
		break;
		valueHex[i] = digitToHex(value % 10);
		value /= 10;
		numberLength++;
	}
}
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	08 95       	ret

00000280 <display_7_segment>:
 280:	ff 92       	push	r15
/**
 * Printing function for decimals
 */

void display_7_segment(float value, uint8_t no_of_decimals)
{
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	f4 2e       	mov	r15, r20
	uint16_t valueInt;

	//convert float to int
	for (int i = 0; i<no_of_decimals; i++)
 28c:	04 2f       	mov	r16, r20
 28e:	10 e0       	ldi	r17, 0x00	; 0
 290:	10 16       	cp	r1, r16
 292:	11 06       	cpc	r1, r17
 294:	5c f4       	brge	.+22     	; 0x2ac <display_7_segment+0x2c>
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	d0 e0       	ldi	r29, 0x00	; 0
	{
		value = value * 10;
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	40 e2       	ldi	r20, 0x20	; 32
 2a0:	51 e4       	ldi	r21, 0x41	; 65
 2a2:	c2 d2       	rcall	.+1412   	; 0x828 <__mulsf3>
void display_7_segment(float value, uint8_t no_of_decimals)
{
	uint16_t valueInt;

	//convert float to int
	for (int i = 0; i<no_of_decimals; i++)
 2a4:	21 96       	adiw	r28, 0x01	; 1
 2a6:	c0 17       	cp	r28, r16
 2a8:	d1 07       	cpc	r29, r17
 2aa:	b9 f7       	brne	.-18     	; 0x29a <display_7_segment+0x1a>
	}
	
	//0.5 is added to the value because the value may not be represented exactly in binary
	valueInt = (int) (value + 0.5);
	
	printint_7_segment(valueInt);
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	5f e3       	ldi	r21, 0x3F	; 63
 2b4:	2e d1       	rcall	.+604    	; 0x512 <__addsf3>
 2b6:	f9 d1       	rcall	.+1010   	; 0x6aa <__fixsfsi>
 2b8:	cb 01       	movw	r24, r22
 2ba:	58 df       	rcall	.-336    	; 0x16c <printint_7_segment>

	//set dp section to 1 if at least 1 decimal
	if (no_of_decimals > 0)
 2bc:	ff 20       	and	r15, r15
 2be:	49 f0       	breq	.+18     	; 0x2d2 <display_7_segment+0x52>
		valueHex[no_of_decimals]++;
 2c0:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 2c4:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 2c8:	ef 0d       	add	r30, r15
 2ca:	f1 1d       	adc	r31, r1
 2cc:	80 81       	ld	r24, Z
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 83       	st	Z, r24
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	08 95       	ret

000002de <init_timer0>:
 */

void init_timer0()
{
	//reset to avoid incorrect setup
	TCCR4A = 0;
 2de:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	TCCR4B = 0;
 2e2:	e1 ea       	ldi	r30, 0xA1	; 161
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	10 82       	st	Z, r1
 
	//initialize compare value
	//f = 360 hz
	//lower refresh rates are suitable as long as there are less than 4 segments lit up at the same time
	OCR4A=159;
 2e8:	8f e9       	ldi	r24, 0x9F	; 159
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 2f0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	
	//reset counter
	TCNT4=0;
 2f4:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 2f8:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
 
	//pre-scaler to clk/64
	TCCR4B |= _BV(CS42);
 2fc:	80 81       	ld	r24, Z
 2fe:	84 60       	ori	r24, 0x04	; 4
 300:	80 83       	st	Z, r24
	TCCR4B &= ~(_BV(CS41));
 302:	80 81       	ld	r24, Z
 304:	8d 7f       	andi	r24, 0xFD	; 253
 306:	80 83       	st	Z, r24
	TCCR4B &= ~(_BV(CS40));
 308:	80 81       	ld	r24, Z
 30a:	8e 7f       	andi	r24, 0xFE	; 254
 30c:	80 83       	st	Z, r24
	
	//CTC mode
	TCCR4B |= _BV(WGM42);
 30e:	80 81       	ld	r24, Z
 310:	88 60       	ori	r24, 0x08	; 8
 312:	80 83       	st	Z, r24

	//enable compare interrupt
	TIMSK4 |= _BV(OCIE4A);
 314:	e2 e7       	ldi	r30, 0x72	; 114
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	82 60       	ori	r24, 0x02	; 2
 31c:	80 83       	st	Z, r24
 31e:	08 95       	ret

00000320 <init_7_segment>:


void init_7_segment()
{
	//set SHCP(DDB1), DS(DDB2) and MR(DDB) as output
	DDRB |= _BV(DDB1) | _BV(DDB2) | _BV(DDB3);
 320:	84 b1       	in	r24, 0x04	; 4
 322:	8e 60       	ori	r24, 0x0E	; 14
 324:	84 b9       	out	0x04, r24	; 4
	
	//set STCP as output
	DDRK |= _BV(DDK3);
 326:	e7 e0       	ldi	r30, 0x07	; 7
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	80 81       	ld	r24, Z
 32c:	88 60       	ori	r24, 0x08	; 8
 32e:	80 83       	st	Z, r24
	
	//set MR to high as it is active low
	PORTB |= _BV(PB3);
 330:	2b 9a       	sbi	0x05, 3	; 5
	
	//enable pull-ups
	DDRL = 0x0F;
 332:	8f e0       	ldi	r24, 0x0F	; 15
 334:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	
	init_timer0();
 338:	d2 cf       	rjmp	.-92     	; 0x2de <init_timer0>
 33a:	08 95       	ret

0000033c <__vector_42>:
	//enable compare interrupt
	TIMSK4 |= _BV(OCIE4A);
}

ISR(TIMER4_COMPA_vect)
{
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	0b b6       	in	r0, 0x3b	; 59
 348:	0f 92       	push	r0
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
	//disable global interrupt
	cli();
 356:	f8 94       	cli
	
	//push to storage register
	for (int j = 0; j<8; j++)
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
	{
		//load MSB firsts
		if ((valueHex[currentSegment] >> j) & 1)
 35c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <currentSegment>
 360:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 364:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 368:	e8 0f       	add	r30, r24
 36a:	f1 1d       	adc	r31, r1
 36c:	80 81       	ld	r24, Z
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <__vector_42+0x3c>
 374:	95 95       	asr	r25
 376:	87 95       	ror	r24
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <__vector_42+0x38>
 37c:	80 ff       	sbrs	r24, 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__vector_42+0x48>
			PORTB |= _BV(PB2);
 380:	2a 9a       	sbi	0x05, 2	; 5
 382:	01 c0       	rjmp	.+2      	; 0x386 <__vector_42+0x4a>
		else
			PORTB &= ~(_BV(PB2));
 384:	2a 98       	cbi	0x05, 2	; 5
		
		//set SHCP to high
		PORTB |= _BV(PB1);
 386:	29 9a       	sbi	0x05, 1	; 5
		
		//set SHCP to low
		PORTB &= ~(_BV(PB1));
 388:	29 98       	cbi	0x05, 1	; 5
{
	//disable global interrupt
	cli();
	
	//push to storage register
	for (int j = 0; j<8; j++)
 38a:	2f 5f       	subi	r18, 0xFF	; 255
 38c:	3f 4f       	sbci	r19, 0xFF	; 255
 38e:	28 30       	cpi	r18, 0x08	; 8
 390:	31 05       	cpc	r19, r1
 392:	21 f7       	brne	.-56     	; 0x35c <__vector_42+0x20>
		//set SHCP to low
		PORTB &= ~(_BV(PB1));
	}

	//clear all the displaying segments then light-up the segment on the current position
	PORTL &= ~(_BV(PL0) | _BV(PL1) | _BV(PL2) | _BV(PL3));
 394:	eb e0       	ldi	r30, 0x0B	; 11
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	80 81       	ld	r24, Z
 39a:	80 7f       	andi	r24, 0xF0	; 240
 39c:	80 83       	st	Z, r24
	
	//select which segment the byte will be displayed on
	PORTL |= _BV(currentSegment);
 39e:	20 81       	ld	r18, Z
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	00 90 08 02 	lds	r0, 0x0208	; 0x800208 <currentSegment>
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <__vector_42+0x72>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <__vector_42+0x6e>
 3b2:	82 2b       	or	r24, r18
 3b4:	80 83       	st	Z, r24
	
	//shift byte to display
	//set latch high
	PORTK |= _BV(PK3);
 3b6:	e8 e0       	ldi	r30, 0x08	; 8
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	80 81       	ld	r24, Z
 3bc:	88 60       	ori	r24, 0x08	; 8
 3be:	80 83       	st	Z, r24
	
	//set latch low
	PORTK &= ~(_BV(PK3));
 3c0:	80 81       	ld	r24, Z
 3c2:	87 7f       	andi	r24, 0xF7	; 247
 3c4:	80 83       	st	Z, r24
	
	//move to next segment
	currentSegment++;
 3c6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <currentSegment>
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <currentSegment>
	
	//reset segment position once the last digit is printed
	if (currentSegment == numberLength)
 3d0:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <numberLength>
 3d4:	89 13       	cpse	r24, r25
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <__vector_42+0xa0>
		currentSegment = 0;
 3d8:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <currentSegment>
		
	//enable global interrupt
	sei();
 3dc:	78 94       	sei
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	3f 91       	pop	r19
 3e8:	2f 91       	pop	r18
 3ea:	0f 90       	pop	r0
 3ec:	0b be       	out	0x3b, r0	; 59
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <main>:

#define F_CPU 7372800

int main(void)
{
	init_7_segment();
 3f8:	93 df       	rcall	.-218    	; 0x320 <init_7_segment>
	init_adc();	
 3fa:	20 d0       	rcall	.+64     	; 0x43c <init_adc>
 3fc:	78 94       	sei
	sei();
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <main+0x6>

00000400 <init_timer1>:
 400:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

void init_timer1()
{
	//reset to avoid incorrect setup
	TCCR1A = 0;
	TCCR1B = 0;
 404:	e1 e8       	ldi	r30, 0x81	; 129
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	10 82       	st	Z, r1
	
	//initialize compare value
	//f = 360 hz
	//lower refresh rates are suitable as long as there are less than 4 segments lit up at the same time
	OCR1A=159;
 40a:	8f e9       	ldi	r24, 0x9F	; 159
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 412:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	//reset counter
	TCNT1=0;
 416:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 41a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//pre-scaler to clk/64
	TCCR1B |= _BV(CS12);
 41e:	80 81       	ld	r24, Z
 420:	84 60       	ori	r24, 0x04	; 4
 422:	80 83       	st	Z, r24
	TCCR1B &= ~(_BV(CS11));
 424:	80 81       	ld	r24, Z
 426:	8d 7f       	andi	r24, 0xFD	; 253
 428:	80 83       	st	Z, r24
	TCCR1B &= ~(_BV(CS10));
 42a:	80 81       	ld	r24, Z
 42c:	8e 7f       	andi	r24, 0xFE	; 254
 42e:	80 83       	st	Z, r24

	//enable compare interrupt
	TIMSK1 |= _BV(OCIE1A);
 430:	ef e6       	ldi	r30, 0x6F	; 111
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	82 60       	ori	r24, 0x02	; 2
 438:	80 83       	st	Z, r24
 43a:	08 95       	ret

0000043c <init_adc>:
void init_timer1();

void init_adc()
{
	//Internal 1.1V Voltage Reference
	ADMUX |= _BV(REFS1);
 43c:	ec e7       	ldi	r30, 0x7C	; 124
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	80 68       	ori	r24, 0x80	; 128
 444:	80 83       	st	Z, r24
	
	//Enable ADC (ADEN)
	ADCSRA |= _BV(ADEN);
 446:	ea e7       	ldi	r30, 0x7A	; 122
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	80 68       	ori	r24, 0x80	; 128
 44e:	80 83       	st	Z, r24
	
	//Enable Interrupt (ADIE)
	ADCSRA |=  _BV(ADIE);
 450:	80 81       	ld	r24, Z
 452:	88 60       	ori	r24, 0x08	; 8
 454:	80 83       	st	Z, r24
	
	//set port F as input
	DDRF = 0x00;
 456:	10 ba       	out	0x10, r1	; 16
	init_timer1();
 458:	d3 cf       	rjmp	.-90     	; 0x400 <init_timer1>
 45a:	08 95       	ret

0000045c <__vector_17>:
	//enable compare interrupt
	TIMSK1 |= _BV(OCIE1A);
}

ISR(TIMER1_COMPA_vect)
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	0b b6       	in	r0, 0x3b	; 59
 468:	0f 92       	push	r0
 46a:	8f 93       	push	r24
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
	//set bit to start conversion
	ADCSRA |= _BV(ADSC);
 470:	ea e7       	ldi	r30, 0x7A	; 122
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	80 64       	ori	r24, 0x40	; 64
 478:	80 83       	st	Z, r24
}
 47a:	ff 91       	pop	r31
 47c:	ef 91       	pop	r30
 47e:	8f 91       	pop	r24
 480:	0f 90       	pop	r0
 482:	0b be       	out	0x3b, r0	; 59
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <__vector_29>:

ISR(ADC_vect)
{
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	0b b6       	in	r0, 0x3b	; 59
 49a:	0f 92       	push	r0
 49c:	2f 93       	push	r18
 49e:	3f 93       	push	r19
 4a0:	4f 93       	push	r20
 4a2:	5f 93       	push	r21
 4a4:	6f 93       	push	r22
 4a6:	7f 93       	push	r23
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31

	//get temperature according to the formula in the TC1047A sensor datasheet
	temperature = (ADC - 500.0)/ 10.0;
 4b4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 4b8:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	25 d1       	rcall	.+586    	; 0x70c <__floatunsisf>
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	4a ef       	ldi	r20, 0xFA	; 250
 4c8:	53 e4       	ldi	r21, 0x43	; 67
 4ca:	22 d0       	rcall	.+68     	; 0x510 <__subsf3>
 4cc:	20 e0       	ldi	r18, 0x00	; 0
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	40 e2       	ldi	r20, 0x20	; 32
 4d2:	51 e4       	ldi	r21, 0x41	; 65
 4d4:	82 d0       	rcall	.+260    	; 0x5da <__divsf3>
 4d6:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <temperature>
 4da:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <temperature+0x1>
 4de:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <temperature+0x2>
 4e2:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <temperature+0x3>
	
	//having a 2nd decimal position is pointless as it's always 0
	display_7_segment(temperature, 1);
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	cb de       	rcall	.-618    	; 0x280 <display_7_segment>
 4ea:	ff 91       	pop	r31
 4ec:	ef 91       	pop	r30
 4ee:	bf 91       	pop	r27
 4f0:	af 91       	pop	r26
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	7f 91       	pop	r23
 4f8:	6f 91       	pop	r22
 4fa:	5f 91       	pop	r21
 4fc:	4f 91       	pop	r20
 4fe:	3f 91       	pop	r19
 500:	2f 91       	pop	r18
 502:	0f 90       	pop	r0
 504:	0b be       	out	0x3b, r0	; 59
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__subsf3>:
 510:	50 58       	subi	r21, 0x80	; 128

00000512 <__addsf3>:
 512:	bb 27       	eor	r27, r27
 514:	aa 27       	eor	r26, r26
 516:	0e d0       	rcall	.+28     	; 0x534 <__addsf3x>
 518:	4d c1       	rjmp	.+666    	; 0x7b4 <__fp_round>
 51a:	3e d1       	rcall	.+636    	; 0x798 <__fp_pscA>
 51c:	30 f0       	brcs	.+12     	; 0x52a <__addsf3+0x18>
 51e:	43 d1       	rcall	.+646    	; 0x7a6 <__fp_pscB>
 520:	20 f0       	brcs	.+8      	; 0x52a <__addsf3+0x18>
 522:	31 f4       	brne	.+12     	; 0x530 <__addsf3+0x1e>
 524:	9f 3f       	cpi	r25, 0xFF	; 255
 526:	11 f4       	brne	.+4      	; 0x52c <__addsf3+0x1a>
 528:	1e f4       	brtc	.+6      	; 0x530 <__addsf3+0x1e>
 52a:	33 c1       	rjmp	.+614    	; 0x792 <__fp_nan>
 52c:	0e f4       	brtc	.+2      	; 0x530 <__addsf3+0x1e>
 52e:	e0 95       	com	r30
 530:	e7 fb       	bst	r30, 7
 532:	29 c1       	rjmp	.+594    	; 0x786 <__fp_inf>

00000534 <__addsf3x>:
 534:	e9 2f       	mov	r30, r25
 536:	4f d1       	rcall	.+670    	; 0x7d6 <__fp_split3>
 538:	80 f3       	brcs	.-32     	; 0x51a <__addsf3+0x8>
 53a:	ba 17       	cp	r27, r26
 53c:	62 07       	cpc	r22, r18
 53e:	73 07       	cpc	r23, r19
 540:	84 07       	cpc	r24, r20
 542:	95 07       	cpc	r25, r21
 544:	18 f0       	brcs	.+6      	; 0x54c <__addsf3x+0x18>
 546:	71 f4       	brne	.+28     	; 0x564 <__addsf3x+0x30>
 548:	9e f5       	brtc	.+102    	; 0x5b0 <__addsf3x+0x7c>
 54a:	67 c1       	rjmp	.+718    	; 0x81a <__fp_zero>
 54c:	0e f4       	brtc	.+2      	; 0x550 <__addsf3x+0x1c>
 54e:	e0 95       	com	r30
 550:	0b 2e       	mov	r0, r27
 552:	ba 2f       	mov	r27, r26
 554:	a0 2d       	mov	r26, r0
 556:	0b 01       	movw	r0, r22
 558:	b9 01       	movw	r22, r18
 55a:	90 01       	movw	r18, r0
 55c:	0c 01       	movw	r0, r24
 55e:	ca 01       	movw	r24, r20
 560:	a0 01       	movw	r20, r0
 562:	11 24       	eor	r1, r1
 564:	ff 27       	eor	r31, r31
 566:	59 1b       	sub	r21, r25
 568:	99 f0       	breq	.+38     	; 0x590 <__addsf3x+0x5c>
 56a:	59 3f       	cpi	r21, 0xF9	; 249
 56c:	50 f4       	brcc	.+20     	; 0x582 <__addsf3x+0x4e>
 56e:	50 3e       	cpi	r21, 0xE0	; 224
 570:	68 f1       	brcs	.+90     	; 0x5cc <__addsf3x+0x98>
 572:	1a 16       	cp	r1, r26
 574:	f0 40       	sbci	r31, 0x00	; 0
 576:	a2 2f       	mov	r26, r18
 578:	23 2f       	mov	r18, r19
 57a:	34 2f       	mov	r19, r20
 57c:	44 27       	eor	r20, r20
 57e:	58 5f       	subi	r21, 0xF8	; 248
 580:	f3 cf       	rjmp	.-26     	; 0x568 <__addsf3x+0x34>
 582:	46 95       	lsr	r20
 584:	37 95       	ror	r19
 586:	27 95       	ror	r18
 588:	a7 95       	ror	r26
 58a:	f0 40       	sbci	r31, 0x00	; 0
 58c:	53 95       	inc	r21
 58e:	c9 f7       	brne	.-14     	; 0x582 <__addsf3x+0x4e>
 590:	7e f4       	brtc	.+30     	; 0x5b0 <__addsf3x+0x7c>
 592:	1f 16       	cp	r1, r31
 594:	ba 0b       	sbc	r27, r26
 596:	62 0b       	sbc	r22, r18
 598:	73 0b       	sbc	r23, r19
 59a:	84 0b       	sbc	r24, r20
 59c:	ba f0       	brmi	.+46     	; 0x5cc <__addsf3x+0x98>
 59e:	91 50       	subi	r25, 0x01	; 1
 5a0:	a1 f0       	breq	.+40     	; 0x5ca <__addsf3x+0x96>
 5a2:	ff 0f       	add	r31, r31
 5a4:	bb 1f       	adc	r27, r27
 5a6:	66 1f       	adc	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	c2 f7       	brpl	.-16     	; 0x59e <__addsf3x+0x6a>
 5ae:	0e c0       	rjmp	.+28     	; 0x5cc <__addsf3x+0x98>
 5b0:	ba 0f       	add	r27, r26
 5b2:	62 1f       	adc	r22, r18
 5b4:	73 1f       	adc	r23, r19
 5b6:	84 1f       	adc	r24, r20
 5b8:	48 f4       	brcc	.+18     	; 0x5cc <__addsf3x+0x98>
 5ba:	87 95       	ror	r24
 5bc:	77 95       	ror	r23
 5be:	67 95       	ror	r22
 5c0:	b7 95       	ror	r27
 5c2:	f7 95       	ror	r31
 5c4:	9e 3f       	cpi	r25, 0xFE	; 254
 5c6:	08 f0       	brcs	.+2      	; 0x5ca <__addsf3x+0x96>
 5c8:	b3 cf       	rjmp	.-154    	; 0x530 <__addsf3+0x1e>
 5ca:	93 95       	inc	r25
 5cc:	88 0f       	add	r24, r24
 5ce:	08 f0       	brcs	.+2      	; 0x5d2 <__addsf3x+0x9e>
 5d0:	99 27       	eor	r25, r25
 5d2:	ee 0f       	add	r30, r30
 5d4:	97 95       	ror	r25
 5d6:	87 95       	ror	r24
 5d8:	08 95       	ret

000005da <__divsf3>:
 5da:	0c d0       	rcall	.+24     	; 0x5f4 <__divsf3x>
 5dc:	eb c0       	rjmp	.+470    	; 0x7b4 <__fp_round>
 5de:	e3 d0       	rcall	.+454    	; 0x7a6 <__fp_pscB>
 5e0:	40 f0       	brcs	.+16     	; 0x5f2 <__divsf3+0x18>
 5e2:	da d0       	rcall	.+436    	; 0x798 <__fp_pscA>
 5e4:	30 f0       	brcs	.+12     	; 0x5f2 <__divsf3+0x18>
 5e6:	21 f4       	brne	.+8      	; 0x5f0 <__divsf3+0x16>
 5e8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ea:	19 f0       	breq	.+6      	; 0x5f2 <__divsf3+0x18>
 5ec:	cc c0       	rjmp	.+408    	; 0x786 <__fp_inf>
 5ee:	51 11       	cpse	r21, r1
 5f0:	15 c1       	rjmp	.+554    	; 0x81c <__fp_szero>
 5f2:	cf c0       	rjmp	.+414    	; 0x792 <__fp_nan>

000005f4 <__divsf3x>:
 5f4:	f0 d0       	rcall	.+480    	; 0x7d6 <__fp_split3>
 5f6:	98 f3       	brcs	.-26     	; 0x5de <__divsf3+0x4>

000005f8 <__divsf3_pse>:
 5f8:	99 23       	and	r25, r25
 5fa:	c9 f3       	breq	.-14     	; 0x5ee <__divsf3+0x14>
 5fc:	55 23       	and	r21, r21
 5fe:	b1 f3       	breq	.-20     	; 0x5ec <__divsf3+0x12>
 600:	95 1b       	sub	r25, r21
 602:	55 0b       	sbc	r21, r21
 604:	bb 27       	eor	r27, r27
 606:	aa 27       	eor	r26, r26
 608:	62 17       	cp	r22, r18
 60a:	73 07       	cpc	r23, r19
 60c:	84 07       	cpc	r24, r20
 60e:	38 f0       	brcs	.+14     	; 0x61e <__divsf3_pse+0x26>
 610:	9f 5f       	subi	r25, 0xFF	; 255
 612:	5f 4f       	sbci	r21, 0xFF	; 255
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	44 1f       	adc	r20, r20
 61a:	aa 1f       	adc	r26, r26
 61c:	a9 f3       	breq	.-22     	; 0x608 <__divsf3_pse+0x10>
 61e:	33 d0       	rcall	.+102    	; 0x686 <__divsf3_pse+0x8e>
 620:	0e 2e       	mov	r0, r30
 622:	3a f0       	brmi	.+14     	; 0x632 <__divsf3_pse+0x3a>
 624:	e0 e8       	ldi	r30, 0x80	; 128
 626:	30 d0       	rcall	.+96     	; 0x688 <__divsf3_pse+0x90>
 628:	91 50       	subi	r25, 0x01	; 1
 62a:	50 40       	sbci	r21, 0x00	; 0
 62c:	e6 95       	lsr	r30
 62e:	00 1c       	adc	r0, r0
 630:	ca f7       	brpl	.-14     	; 0x624 <__divsf3_pse+0x2c>
 632:	29 d0       	rcall	.+82     	; 0x686 <__divsf3_pse+0x8e>
 634:	fe 2f       	mov	r31, r30
 636:	27 d0       	rcall	.+78     	; 0x686 <__divsf3_pse+0x8e>
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	bb 1f       	adc	r27, r27
 640:	26 17       	cp	r18, r22
 642:	37 07       	cpc	r19, r23
 644:	48 07       	cpc	r20, r24
 646:	ab 07       	cpc	r26, r27
 648:	b0 e8       	ldi	r27, 0x80	; 128
 64a:	09 f0       	breq	.+2      	; 0x64e <__divsf3_pse+0x56>
 64c:	bb 0b       	sbc	r27, r27
 64e:	80 2d       	mov	r24, r0
 650:	bf 01       	movw	r22, r30
 652:	ff 27       	eor	r31, r31
 654:	93 58       	subi	r25, 0x83	; 131
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	2a f0       	brmi	.+10     	; 0x664 <__divsf3_pse+0x6c>
 65a:	9e 3f       	cpi	r25, 0xFE	; 254
 65c:	51 05       	cpc	r21, r1
 65e:	68 f0       	brcs	.+26     	; 0x67a <__divsf3_pse+0x82>
 660:	92 c0       	rjmp	.+292    	; 0x786 <__fp_inf>
 662:	dc c0       	rjmp	.+440    	; 0x81c <__fp_szero>
 664:	5f 3f       	cpi	r21, 0xFF	; 255
 666:	ec f3       	brlt	.-6      	; 0x662 <__divsf3_pse+0x6a>
 668:	98 3e       	cpi	r25, 0xE8	; 232
 66a:	dc f3       	brlt	.-10     	; 0x662 <__divsf3_pse+0x6a>
 66c:	86 95       	lsr	r24
 66e:	77 95       	ror	r23
 670:	67 95       	ror	r22
 672:	b7 95       	ror	r27
 674:	f7 95       	ror	r31
 676:	9f 5f       	subi	r25, 0xFF	; 255
 678:	c9 f7       	brne	.-14     	; 0x66c <__divsf3_pse+0x74>
 67a:	88 0f       	add	r24, r24
 67c:	91 1d       	adc	r25, r1
 67e:	96 95       	lsr	r25
 680:	87 95       	ror	r24
 682:	97 f9       	bld	r25, 7
 684:	08 95       	ret
 686:	e1 e0       	ldi	r30, 0x01	; 1
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	bb 1f       	adc	r27, r27
 690:	62 17       	cp	r22, r18
 692:	73 07       	cpc	r23, r19
 694:	84 07       	cpc	r24, r20
 696:	ba 07       	cpc	r27, r26
 698:	20 f0       	brcs	.+8      	; 0x6a2 <__divsf3_pse+0xaa>
 69a:	62 1b       	sub	r22, r18
 69c:	73 0b       	sbc	r23, r19
 69e:	84 0b       	sbc	r24, r20
 6a0:	ba 0b       	sbc	r27, r26
 6a2:	ee 1f       	adc	r30, r30
 6a4:	88 f7       	brcc	.-30     	; 0x688 <__divsf3_pse+0x90>
 6a6:	e0 95       	com	r30
 6a8:	08 95       	ret

000006aa <__fixsfsi>:
 6aa:	04 d0       	rcall	.+8      	; 0x6b4 <__fixunssfsi>
 6ac:	68 94       	set
 6ae:	b1 11       	cpse	r27, r1
 6b0:	b5 c0       	rjmp	.+362    	; 0x81c <__fp_szero>
 6b2:	08 95       	ret

000006b4 <__fixunssfsi>:
 6b4:	98 d0       	rcall	.+304    	; 0x7e6 <__fp_splitA>
 6b6:	88 f0       	brcs	.+34     	; 0x6da <__fixunssfsi+0x26>
 6b8:	9f 57       	subi	r25, 0x7F	; 127
 6ba:	90 f0       	brcs	.+36     	; 0x6e0 <__fixunssfsi+0x2c>
 6bc:	b9 2f       	mov	r27, r25
 6be:	99 27       	eor	r25, r25
 6c0:	b7 51       	subi	r27, 0x17	; 23
 6c2:	a0 f0       	brcs	.+40     	; 0x6ec <__fixunssfsi+0x38>
 6c4:	d1 f0       	breq	.+52     	; 0x6fa <__fixunssfsi+0x46>
 6c6:	66 0f       	add	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	1a f0       	brmi	.+6      	; 0x6d6 <__fixunssfsi+0x22>
 6d0:	ba 95       	dec	r27
 6d2:	c9 f7       	brne	.-14     	; 0x6c6 <__fixunssfsi+0x12>
 6d4:	12 c0       	rjmp	.+36     	; 0x6fa <__fixunssfsi+0x46>
 6d6:	b1 30       	cpi	r27, 0x01	; 1
 6d8:	81 f0       	breq	.+32     	; 0x6fa <__fixunssfsi+0x46>
 6da:	9f d0       	rcall	.+318    	; 0x81a <__fp_zero>
 6dc:	b1 e0       	ldi	r27, 0x01	; 1
 6de:	08 95       	ret
 6e0:	9c c0       	rjmp	.+312    	; 0x81a <__fp_zero>
 6e2:	67 2f       	mov	r22, r23
 6e4:	78 2f       	mov	r23, r24
 6e6:	88 27       	eor	r24, r24
 6e8:	b8 5f       	subi	r27, 0xF8	; 248
 6ea:	39 f0       	breq	.+14     	; 0x6fa <__fixunssfsi+0x46>
 6ec:	b9 3f       	cpi	r27, 0xF9	; 249
 6ee:	cc f3       	brlt	.-14     	; 0x6e2 <__fixunssfsi+0x2e>
 6f0:	86 95       	lsr	r24
 6f2:	77 95       	ror	r23
 6f4:	67 95       	ror	r22
 6f6:	b3 95       	inc	r27
 6f8:	d9 f7       	brne	.-10     	; 0x6f0 <__fixunssfsi+0x3c>
 6fa:	3e f4       	brtc	.+14     	; 0x70a <__fixunssfsi+0x56>
 6fc:	90 95       	com	r25
 6fe:	80 95       	com	r24
 700:	70 95       	com	r23
 702:	61 95       	neg	r22
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	08 95       	ret

0000070c <__floatunsisf>:
 70c:	e8 94       	clt
 70e:	09 c0       	rjmp	.+18     	; 0x722 <__floatsisf+0x12>

00000710 <__floatsisf>:
 710:	97 fb       	bst	r25, 7
 712:	3e f4       	brtc	.+14     	; 0x722 <__floatsisf+0x12>
 714:	90 95       	com	r25
 716:	80 95       	com	r24
 718:	70 95       	com	r23
 71a:	61 95       	neg	r22
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	8f 4f       	sbci	r24, 0xFF	; 255
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	99 23       	and	r25, r25
 724:	a9 f0       	breq	.+42     	; 0x750 <__floatsisf+0x40>
 726:	f9 2f       	mov	r31, r25
 728:	96 e9       	ldi	r25, 0x96	; 150
 72a:	bb 27       	eor	r27, r27
 72c:	93 95       	inc	r25
 72e:	f6 95       	lsr	r31
 730:	87 95       	ror	r24
 732:	77 95       	ror	r23
 734:	67 95       	ror	r22
 736:	b7 95       	ror	r27
 738:	f1 11       	cpse	r31, r1
 73a:	f8 cf       	rjmp	.-16     	; 0x72c <__floatsisf+0x1c>
 73c:	fa f4       	brpl	.+62     	; 0x77c <__floatsisf+0x6c>
 73e:	bb 0f       	add	r27, r27
 740:	11 f4       	brne	.+4      	; 0x746 <__floatsisf+0x36>
 742:	60 ff       	sbrs	r22, 0
 744:	1b c0       	rjmp	.+54     	; 0x77c <__floatsisf+0x6c>
 746:	6f 5f       	subi	r22, 0xFF	; 255
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	16 c0       	rjmp	.+44     	; 0x77c <__floatsisf+0x6c>
 750:	88 23       	and	r24, r24
 752:	11 f0       	breq	.+4      	; 0x758 <__floatsisf+0x48>
 754:	96 e9       	ldi	r25, 0x96	; 150
 756:	11 c0       	rjmp	.+34     	; 0x77a <__floatsisf+0x6a>
 758:	77 23       	and	r23, r23
 75a:	21 f0       	breq	.+8      	; 0x764 <__floatsisf+0x54>
 75c:	9e e8       	ldi	r25, 0x8E	; 142
 75e:	87 2f       	mov	r24, r23
 760:	76 2f       	mov	r23, r22
 762:	05 c0       	rjmp	.+10     	; 0x76e <__floatsisf+0x5e>
 764:	66 23       	and	r22, r22
 766:	71 f0       	breq	.+28     	; 0x784 <__floatsisf+0x74>
 768:	96 e8       	ldi	r25, 0x86	; 134
 76a:	86 2f       	mov	r24, r22
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	2a f0       	brmi	.+10     	; 0x77c <__floatsisf+0x6c>
 772:	9a 95       	dec	r25
 774:	66 0f       	add	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	da f7       	brpl	.-10     	; 0x772 <__floatsisf+0x62>
 77c:	88 0f       	add	r24, r24
 77e:	96 95       	lsr	r25
 780:	87 95       	ror	r24
 782:	97 f9       	bld	r25, 7
 784:	08 95       	ret

00000786 <__fp_inf>:
 786:	97 f9       	bld	r25, 7
 788:	9f 67       	ori	r25, 0x7F	; 127
 78a:	80 e8       	ldi	r24, 0x80	; 128
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	08 95       	ret

00000792 <__fp_nan>:
 792:	9f ef       	ldi	r25, 0xFF	; 255
 794:	80 ec       	ldi	r24, 0xC0	; 192
 796:	08 95       	ret

00000798 <__fp_pscA>:
 798:	00 24       	eor	r0, r0
 79a:	0a 94       	dec	r0
 79c:	16 16       	cp	r1, r22
 79e:	17 06       	cpc	r1, r23
 7a0:	18 06       	cpc	r1, r24
 7a2:	09 06       	cpc	r0, r25
 7a4:	08 95       	ret

000007a6 <__fp_pscB>:
 7a6:	00 24       	eor	r0, r0
 7a8:	0a 94       	dec	r0
 7aa:	12 16       	cp	r1, r18
 7ac:	13 06       	cpc	r1, r19
 7ae:	14 06       	cpc	r1, r20
 7b0:	05 06       	cpc	r0, r21
 7b2:	08 95       	ret

000007b4 <__fp_round>:
 7b4:	09 2e       	mov	r0, r25
 7b6:	03 94       	inc	r0
 7b8:	00 0c       	add	r0, r0
 7ba:	11 f4       	brne	.+4      	; 0x7c0 <__fp_round+0xc>
 7bc:	88 23       	and	r24, r24
 7be:	52 f0       	brmi	.+20     	; 0x7d4 <__fp_round+0x20>
 7c0:	bb 0f       	add	r27, r27
 7c2:	40 f4       	brcc	.+16     	; 0x7d4 <__fp_round+0x20>
 7c4:	bf 2b       	or	r27, r31
 7c6:	11 f4       	brne	.+4      	; 0x7cc <__fp_round+0x18>
 7c8:	60 ff       	sbrs	r22, 0
 7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__fp_round+0x20>
 7cc:	6f 5f       	subi	r22, 0xFF	; 255
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	08 95       	ret

000007d6 <__fp_split3>:
 7d6:	57 fd       	sbrc	r21, 7
 7d8:	90 58       	subi	r25, 0x80	; 128
 7da:	44 0f       	add	r20, r20
 7dc:	55 1f       	adc	r21, r21
 7de:	59 f0       	breq	.+22     	; 0x7f6 <__fp_splitA+0x10>
 7e0:	5f 3f       	cpi	r21, 0xFF	; 255
 7e2:	71 f0       	breq	.+28     	; 0x800 <__fp_splitA+0x1a>
 7e4:	47 95       	ror	r20

000007e6 <__fp_splitA>:
 7e6:	88 0f       	add	r24, r24
 7e8:	97 fb       	bst	r25, 7
 7ea:	99 1f       	adc	r25, r25
 7ec:	61 f0       	breq	.+24     	; 0x806 <__fp_splitA+0x20>
 7ee:	9f 3f       	cpi	r25, 0xFF	; 255
 7f0:	79 f0       	breq	.+30     	; 0x810 <__fp_splitA+0x2a>
 7f2:	87 95       	ror	r24
 7f4:	08 95       	ret
 7f6:	12 16       	cp	r1, r18
 7f8:	13 06       	cpc	r1, r19
 7fa:	14 06       	cpc	r1, r20
 7fc:	55 1f       	adc	r21, r21
 7fe:	f2 cf       	rjmp	.-28     	; 0x7e4 <__fp_split3+0xe>
 800:	46 95       	lsr	r20
 802:	f1 df       	rcall	.-30     	; 0x7e6 <__fp_splitA>
 804:	08 c0       	rjmp	.+16     	; 0x816 <__fp_splitA+0x30>
 806:	16 16       	cp	r1, r22
 808:	17 06       	cpc	r1, r23
 80a:	18 06       	cpc	r1, r24
 80c:	99 1f       	adc	r25, r25
 80e:	f1 cf       	rjmp	.-30     	; 0x7f2 <__fp_splitA+0xc>
 810:	86 95       	lsr	r24
 812:	71 05       	cpc	r23, r1
 814:	61 05       	cpc	r22, r1
 816:	08 94       	sec
 818:	08 95       	ret

0000081a <__fp_zero>:
 81a:	e8 94       	clt

0000081c <__fp_szero>:
 81c:	bb 27       	eor	r27, r27
 81e:	66 27       	eor	r22, r22
 820:	77 27       	eor	r23, r23
 822:	cb 01       	movw	r24, r22
 824:	97 f9       	bld	r25, 7
 826:	08 95       	ret

00000828 <__mulsf3>:
 828:	0b d0       	rcall	.+22     	; 0x840 <__mulsf3x>
 82a:	c4 cf       	rjmp	.-120    	; 0x7b4 <__fp_round>
 82c:	b5 df       	rcall	.-150    	; 0x798 <__fp_pscA>
 82e:	28 f0       	brcs	.+10     	; 0x83a <__mulsf3+0x12>
 830:	ba df       	rcall	.-140    	; 0x7a6 <__fp_pscB>
 832:	18 f0       	brcs	.+6      	; 0x83a <__mulsf3+0x12>
 834:	95 23       	and	r25, r21
 836:	09 f0       	breq	.+2      	; 0x83a <__mulsf3+0x12>
 838:	a6 cf       	rjmp	.-180    	; 0x786 <__fp_inf>
 83a:	ab cf       	rjmp	.-170    	; 0x792 <__fp_nan>
 83c:	11 24       	eor	r1, r1
 83e:	ee cf       	rjmp	.-36     	; 0x81c <__fp_szero>

00000840 <__mulsf3x>:
 840:	ca df       	rcall	.-108    	; 0x7d6 <__fp_split3>
 842:	a0 f3       	brcs	.-24     	; 0x82c <__mulsf3+0x4>

00000844 <__mulsf3_pse>:
 844:	95 9f       	mul	r25, r21
 846:	d1 f3       	breq	.-12     	; 0x83c <__mulsf3+0x14>
 848:	95 0f       	add	r25, r21
 84a:	50 e0       	ldi	r21, 0x00	; 0
 84c:	55 1f       	adc	r21, r21
 84e:	62 9f       	mul	r22, r18
 850:	f0 01       	movw	r30, r0
 852:	72 9f       	mul	r23, r18
 854:	bb 27       	eor	r27, r27
 856:	f0 0d       	add	r31, r0
 858:	b1 1d       	adc	r27, r1
 85a:	63 9f       	mul	r22, r19
 85c:	aa 27       	eor	r26, r26
 85e:	f0 0d       	add	r31, r0
 860:	b1 1d       	adc	r27, r1
 862:	aa 1f       	adc	r26, r26
 864:	64 9f       	mul	r22, r20
 866:	66 27       	eor	r22, r22
 868:	b0 0d       	add	r27, r0
 86a:	a1 1d       	adc	r26, r1
 86c:	66 1f       	adc	r22, r22
 86e:	82 9f       	mul	r24, r18
 870:	22 27       	eor	r18, r18
 872:	b0 0d       	add	r27, r0
 874:	a1 1d       	adc	r26, r1
 876:	62 1f       	adc	r22, r18
 878:	73 9f       	mul	r23, r19
 87a:	b0 0d       	add	r27, r0
 87c:	a1 1d       	adc	r26, r1
 87e:	62 1f       	adc	r22, r18
 880:	83 9f       	mul	r24, r19
 882:	a0 0d       	add	r26, r0
 884:	61 1d       	adc	r22, r1
 886:	22 1f       	adc	r18, r18
 888:	74 9f       	mul	r23, r20
 88a:	33 27       	eor	r19, r19
 88c:	a0 0d       	add	r26, r0
 88e:	61 1d       	adc	r22, r1
 890:	23 1f       	adc	r18, r19
 892:	84 9f       	mul	r24, r20
 894:	60 0d       	add	r22, r0
 896:	21 1d       	adc	r18, r1
 898:	82 2f       	mov	r24, r18
 89a:	76 2f       	mov	r23, r22
 89c:	6a 2f       	mov	r22, r26
 89e:	11 24       	eor	r1, r1
 8a0:	9f 57       	subi	r25, 0x7F	; 127
 8a2:	50 40       	sbci	r21, 0x00	; 0
 8a4:	8a f0       	brmi	.+34     	; 0x8c8 <__mulsf3_pse+0x84>
 8a6:	e1 f0       	breq	.+56     	; 0x8e0 <__mulsf3_pse+0x9c>
 8a8:	88 23       	and	r24, r24
 8aa:	4a f0       	brmi	.+18     	; 0x8be <__mulsf3_pse+0x7a>
 8ac:	ee 0f       	add	r30, r30
 8ae:	ff 1f       	adc	r31, r31
 8b0:	bb 1f       	adc	r27, r27
 8b2:	66 1f       	adc	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	91 50       	subi	r25, 0x01	; 1
 8ba:	50 40       	sbci	r21, 0x00	; 0
 8bc:	a9 f7       	brne	.-22     	; 0x8a8 <__mulsf3_pse+0x64>
 8be:	9e 3f       	cpi	r25, 0xFE	; 254
 8c0:	51 05       	cpc	r21, r1
 8c2:	70 f0       	brcs	.+28     	; 0x8e0 <__mulsf3_pse+0x9c>
 8c4:	60 cf       	rjmp	.-320    	; 0x786 <__fp_inf>
 8c6:	aa cf       	rjmp	.-172    	; 0x81c <__fp_szero>
 8c8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ca:	ec f3       	brlt	.-6      	; 0x8c6 <__mulsf3_pse+0x82>
 8cc:	98 3e       	cpi	r25, 0xE8	; 232
 8ce:	dc f3       	brlt	.-10     	; 0x8c6 <__mulsf3_pse+0x82>
 8d0:	86 95       	lsr	r24
 8d2:	77 95       	ror	r23
 8d4:	67 95       	ror	r22
 8d6:	b7 95       	ror	r27
 8d8:	f7 95       	ror	r31
 8da:	e7 95       	ror	r30
 8dc:	9f 5f       	subi	r25, 0xFF	; 255
 8de:	c1 f7       	brne	.-16     	; 0x8d0 <__mulsf3_pse+0x8c>
 8e0:	fe 2b       	or	r31, r30
 8e2:	88 0f       	add	r24, r24
 8e4:	91 1d       	adc	r25, r1
 8e6:	96 95       	lsr	r25
 8e8:	87 95       	ror	r24
 8ea:	97 f9       	bld	r25, 7
 8ec:	08 95       	ret

000008ee <__tablejump2__>:
 8ee:	ee 0f       	add	r30, r30
 8f0:	ff 1f       	adc	r31, r31
 8f2:	00 24       	eor	r0, r0
 8f4:	00 1c       	adc	r0, r0
 8f6:	0b be       	out	0x3b, r0	; 59
 8f8:	07 90       	elpm	r0, Z+
 8fa:	f6 91       	elpm	r31, Z
 8fc:	e0 2d       	mov	r30, r0
 8fe:	09 94       	ijmp

00000900 <__umulhisi3>:
 900:	a2 9f       	mul	r26, r18
 902:	b0 01       	movw	r22, r0
 904:	b3 9f       	mul	r27, r19
 906:	c0 01       	movw	r24, r0
 908:	a3 9f       	mul	r26, r19
 90a:	70 0d       	add	r23, r0
 90c:	81 1d       	adc	r24, r1
 90e:	11 24       	eor	r1, r1
 910:	91 1d       	adc	r25, r1
 912:	b2 9f       	mul	r27, r18
 914:	70 0d       	add	r23, r0
 916:	81 1d       	adc	r24, r1
 918:	11 24       	eor	r1, r1
 91a:	91 1d       	adc	r25, r1
 91c:	08 95       	ret

0000091e <malloc>:
 91e:	0f 93       	push	r16
 920:	1f 93       	push	r17
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
 926:	82 30       	cpi	r24, 0x02	; 2
 928:	91 05       	cpc	r25, r1
 92a:	10 f4       	brcc	.+4      	; 0x930 <malloc+0x12>
 92c:	82 e0       	ldi	r24, 0x02	; 2
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__flp>
 934:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__flp+0x1>
 938:	20 e0       	ldi	r18, 0x00	; 0
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	a0 e0       	ldi	r26, 0x00	; 0
 93e:	b0 e0       	ldi	r27, 0x00	; 0
 940:	30 97       	sbiw	r30, 0x00	; 0
 942:	19 f1       	breq	.+70     	; 0x98a <malloc+0x6c>
 944:	40 81       	ld	r20, Z
 946:	51 81       	ldd	r21, Z+1	; 0x01
 948:	02 81       	ldd	r16, Z+2	; 0x02
 94a:	13 81       	ldd	r17, Z+3	; 0x03
 94c:	48 17       	cp	r20, r24
 94e:	59 07       	cpc	r21, r25
 950:	c8 f0       	brcs	.+50     	; 0x984 <malloc+0x66>
 952:	84 17       	cp	r24, r20
 954:	95 07       	cpc	r25, r21
 956:	69 f4       	brne	.+26     	; 0x972 <malloc+0x54>
 958:	10 97       	sbiw	r26, 0x00	; 0
 95a:	31 f0       	breq	.+12     	; 0x968 <malloc+0x4a>
 95c:	12 96       	adiw	r26, 0x02	; 2
 95e:	0c 93       	st	X, r16
 960:	12 97       	sbiw	r26, 0x02	; 2
 962:	13 96       	adiw	r26, 0x03	; 3
 964:	1c 93       	st	X, r17
 966:	27 c0       	rjmp	.+78     	; 0x9b6 <malloc+0x98>
 968:	00 93 10 02 	sts	0x0210, r16	; 0x800210 <__flp>
 96c:	10 93 11 02 	sts	0x0211, r17	; 0x800211 <__flp+0x1>
 970:	22 c0       	rjmp	.+68     	; 0x9b6 <malloc+0x98>
 972:	21 15       	cp	r18, r1
 974:	31 05       	cpc	r19, r1
 976:	19 f0       	breq	.+6      	; 0x97e <malloc+0x60>
 978:	42 17       	cp	r20, r18
 97a:	53 07       	cpc	r21, r19
 97c:	18 f4       	brcc	.+6      	; 0x984 <malloc+0x66>
 97e:	9a 01       	movw	r18, r20
 980:	bd 01       	movw	r22, r26
 982:	ef 01       	movw	r28, r30
 984:	df 01       	movw	r26, r30
 986:	f8 01       	movw	r30, r16
 988:	db cf       	rjmp	.-74     	; 0x940 <malloc+0x22>
 98a:	21 15       	cp	r18, r1
 98c:	31 05       	cpc	r19, r1
 98e:	f9 f0       	breq	.+62     	; 0x9ce <malloc+0xb0>
 990:	28 1b       	sub	r18, r24
 992:	39 0b       	sbc	r19, r25
 994:	24 30       	cpi	r18, 0x04	; 4
 996:	31 05       	cpc	r19, r1
 998:	80 f4       	brcc	.+32     	; 0x9ba <malloc+0x9c>
 99a:	8a 81       	ldd	r24, Y+2	; 0x02
 99c:	9b 81       	ldd	r25, Y+3	; 0x03
 99e:	61 15       	cp	r22, r1
 9a0:	71 05       	cpc	r23, r1
 9a2:	21 f0       	breq	.+8      	; 0x9ac <malloc+0x8e>
 9a4:	fb 01       	movw	r30, r22
 9a6:	93 83       	std	Z+3, r25	; 0x03
 9a8:	82 83       	std	Z+2, r24	; 0x02
 9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <malloc+0x96>
 9ac:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <__flp+0x1>
 9b0:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__flp>
 9b4:	fe 01       	movw	r30, r28
 9b6:	32 96       	adiw	r30, 0x02	; 2
 9b8:	44 c0       	rjmp	.+136    	; 0xa42 <malloc+0x124>
 9ba:	fe 01       	movw	r30, r28
 9bc:	e2 0f       	add	r30, r18
 9be:	f3 1f       	adc	r31, r19
 9c0:	81 93       	st	Z+, r24
 9c2:	91 93       	st	Z+, r25
 9c4:	22 50       	subi	r18, 0x02	; 2
 9c6:	31 09       	sbc	r19, r1
 9c8:	39 83       	std	Y+1, r19	; 0x01
 9ca:	28 83       	st	Y, r18
 9cc:	3a c0       	rjmp	.+116    	; 0xa42 <malloc+0x124>
 9ce:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <__brkval>
 9d2:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <__brkval+0x1>
 9d6:	23 2b       	or	r18, r19
 9d8:	41 f4       	brne	.+16     	; 0x9ea <malloc+0xcc>
 9da:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 9de:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 9e2:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <__brkval+0x1>
 9e6:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <__brkval>
 9ea:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 9ee:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 9f2:	21 15       	cp	r18, r1
 9f4:	31 05       	cpc	r19, r1
 9f6:	41 f4       	brne	.+16     	; 0xa08 <malloc+0xea>
 9f8:	2d b7       	in	r18, 0x3d	; 61
 9fa:	3e b7       	in	r19, 0x3e	; 62
 9fc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 a00:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 a04:	24 1b       	sub	r18, r20
 a06:	35 0b       	sbc	r19, r21
 a08:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__brkval>
 a0c:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <__brkval+0x1>
 a10:	e2 17       	cp	r30, r18
 a12:	f3 07       	cpc	r31, r19
 a14:	a0 f4       	brcc	.+40     	; 0xa3e <malloc+0x120>
 a16:	2e 1b       	sub	r18, r30
 a18:	3f 0b       	sbc	r19, r31
 a1a:	28 17       	cp	r18, r24
 a1c:	39 07       	cpc	r19, r25
 a1e:	78 f0       	brcs	.+30     	; 0xa3e <malloc+0x120>
 a20:	ac 01       	movw	r20, r24
 a22:	4e 5f       	subi	r20, 0xFE	; 254
 a24:	5f 4f       	sbci	r21, 0xFF	; 255
 a26:	24 17       	cp	r18, r20
 a28:	35 07       	cpc	r19, r21
 a2a:	48 f0       	brcs	.+18     	; 0xa3e <malloc+0x120>
 a2c:	4e 0f       	add	r20, r30
 a2e:	5f 1f       	adc	r21, r31
 a30:	50 93 0f 02 	sts	0x020F, r21	; 0x80020f <__brkval+0x1>
 a34:	40 93 0e 02 	sts	0x020E, r20	; 0x80020e <__brkval>
 a38:	81 93       	st	Z+, r24
 a3a:	91 93       	st	Z+, r25
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <malloc+0x124>
 a3e:	e0 e0       	ldi	r30, 0x00	; 0
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	cf 01       	movw	r24, r30
 a44:	df 91       	pop	r29
 a46:	cf 91       	pop	r28
 a48:	1f 91       	pop	r17
 a4a:	0f 91       	pop	r16
 a4c:	08 95       	ret

00000a4e <free>:
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	00 97       	sbiw	r24, 0x00	; 0
 a54:	09 f4       	brne	.+2      	; 0xa58 <free+0xa>
 a56:	81 c0       	rjmp	.+258    	; 0xb5a <free+0x10c>
 a58:	fc 01       	movw	r30, r24
 a5a:	32 97       	sbiw	r30, 0x02	; 2
 a5c:	13 82       	std	Z+3, r1	; 0x03
 a5e:	12 82       	std	Z+2, r1	; 0x02
 a60:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <__flp>
 a64:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <__flp+0x1>
 a68:	10 97       	sbiw	r26, 0x00	; 0
 a6a:	81 f4       	brne	.+32     	; 0xa8c <free+0x3e>
 a6c:	20 81       	ld	r18, Z
 a6e:	31 81       	ldd	r19, Z+1	; 0x01
 a70:	82 0f       	add	r24, r18
 a72:	93 1f       	adc	r25, r19
 a74:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <__brkval>
 a78:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <__brkval+0x1>
 a7c:	28 17       	cp	r18, r24
 a7e:	39 07       	cpc	r19, r25
 a80:	51 f5       	brne	.+84     	; 0xad6 <free+0x88>
 a82:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__brkval+0x1>
 a86:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__brkval>
 a8a:	67 c0       	rjmp	.+206    	; 0xb5a <free+0x10c>
 a8c:	ed 01       	movw	r28, r26
 a8e:	20 e0       	ldi	r18, 0x00	; 0
 a90:	30 e0       	ldi	r19, 0x00	; 0
 a92:	ce 17       	cp	r28, r30
 a94:	df 07       	cpc	r29, r31
 a96:	40 f4       	brcc	.+16     	; 0xaa8 <free+0x5a>
 a98:	4a 81       	ldd	r20, Y+2	; 0x02
 a9a:	5b 81       	ldd	r21, Y+3	; 0x03
 a9c:	9e 01       	movw	r18, r28
 a9e:	41 15       	cp	r20, r1
 aa0:	51 05       	cpc	r21, r1
 aa2:	f1 f0       	breq	.+60     	; 0xae0 <free+0x92>
 aa4:	ea 01       	movw	r28, r20
 aa6:	f5 cf       	rjmp	.-22     	; 0xa92 <free+0x44>
 aa8:	d3 83       	std	Z+3, r29	; 0x03
 aaa:	c2 83       	std	Z+2, r28	; 0x02
 aac:	40 81       	ld	r20, Z
 aae:	51 81       	ldd	r21, Z+1	; 0x01
 ab0:	84 0f       	add	r24, r20
 ab2:	95 1f       	adc	r25, r21
 ab4:	c8 17       	cp	r28, r24
 ab6:	d9 07       	cpc	r29, r25
 ab8:	59 f4       	brne	.+22     	; 0xad0 <free+0x82>
 aba:	88 81       	ld	r24, Y
 abc:	99 81       	ldd	r25, Y+1	; 0x01
 abe:	84 0f       	add	r24, r20
 ac0:	95 1f       	adc	r25, r21
 ac2:	02 96       	adiw	r24, 0x02	; 2
 ac4:	91 83       	std	Z+1, r25	; 0x01
 ac6:	80 83       	st	Z, r24
 ac8:	8a 81       	ldd	r24, Y+2	; 0x02
 aca:	9b 81       	ldd	r25, Y+3	; 0x03
 acc:	93 83       	std	Z+3, r25	; 0x03
 ace:	82 83       	std	Z+2, r24	; 0x02
 ad0:	21 15       	cp	r18, r1
 ad2:	31 05       	cpc	r19, r1
 ad4:	29 f4       	brne	.+10     	; 0xae0 <free+0x92>
 ad6:	f0 93 11 02 	sts	0x0211, r31	; 0x800211 <__flp+0x1>
 ada:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <__flp>
 ade:	3d c0       	rjmp	.+122    	; 0xb5a <free+0x10c>
 ae0:	e9 01       	movw	r28, r18
 ae2:	fb 83       	std	Y+3, r31	; 0x03
 ae4:	ea 83       	std	Y+2, r30	; 0x02
 ae6:	49 91       	ld	r20, Y+
 ae8:	59 91       	ld	r21, Y+
 aea:	c4 0f       	add	r28, r20
 aec:	d5 1f       	adc	r29, r21
 aee:	ec 17       	cp	r30, r28
 af0:	fd 07       	cpc	r31, r29
 af2:	61 f4       	brne	.+24     	; 0xb0c <free+0xbe>
 af4:	80 81       	ld	r24, Z
 af6:	91 81       	ldd	r25, Z+1	; 0x01
 af8:	84 0f       	add	r24, r20
 afa:	95 1f       	adc	r25, r21
 afc:	02 96       	adiw	r24, 0x02	; 2
 afe:	e9 01       	movw	r28, r18
 b00:	99 83       	std	Y+1, r25	; 0x01
 b02:	88 83       	st	Y, r24
 b04:	82 81       	ldd	r24, Z+2	; 0x02
 b06:	93 81       	ldd	r25, Z+3	; 0x03
 b08:	9b 83       	std	Y+3, r25	; 0x03
 b0a:	8a 83       	std	Y+2, r24	; 0x02
 b0c:	e0 e0       	ldi	r30, 0x00	; 0
 b0e:	f0 e0       	ldi	r31, 0x00	; 0
 b10:	12 96       	adiw	r26, 0x02	; 2
 b12:	8d 91       	ld	r24, X+
 b14:	9c 91       	ld	r25, X
 b16:	13 97       	sbiw	r26, 0x03	; 3
 b18:	00 97       	sbiw	r24, 0x00	; 0
 b1a:	19 f0       	breq	.+6      	; 0xb22 <free+0xd4>
 b1c:	fd 01       	movw	r30, r26
 b1e:	dc 01       	movw	r26, r24
 b20:	f7 cf       	rjmp	.-18     	; 0xb10 <free+0xc2>
 b22:	8d 91       	ld	r24, X+
 b24:	9c 91       	ld	r25, X
 b26:	11 97       	sbiw	r26, 0x01	; 1
 b28:	9d 01       	movw	r18, r26
 b2a:	2e 5f       	subi	r18, 0xFE	; 254
 b2c:	3f 4f       	sbci	r19, 0xFF	; 255
 b2e:	82 0f       	add	r24, r18
 b30:	93 1f       	adc	r25, r19
 b32:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <__brkval>
 b36:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <__brkval+0x1>
 b3a:	28 17       	cp	r18, r24
 b3c:	39 07       	cpc	r19, r25
 b3e:	69 f4       	brne	.+26     	; 0xb5a <free+0x10c>
 b40:	30 97       	sbiw	r30, 0x00	; 0
 b42:	29 f4       	brne	.+10     	; 0xb4e <free+0x100>
 b44:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <__flp+0x1>
 b48:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <__flp>
 b4c:	02 c0       	rjmp	.+4      	; 0xb52 <free+0x104>
 b4e:	13 82       	std	Z+3, r1	; 0x03
 b50:	12 82       	std	Z+2, r1	; 0x02
 b52:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <__brkval+0x1>
 b56:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <__brkval>
 b5a:	df 91       	pop	r29
 b5c:	cf 91       	pop	r28
 b5e:	08 95       	ret

00000b60 <_exit>:
 b60:	f8 94       	cli

00000b62 <__stop_program>:
 b62:	ff cf       	rjmp	.-2      	; 0xb62 <__stop_program>
